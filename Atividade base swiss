# Atividade base swiss
# Grupo: Letícia, Mario, Guilherme, Larissa, Maria Emilia

# carrega as bibliotecas
pacman::p_load(car, caret, corrplot, data.table, dplyr, forcats, funModeling, mltools, randomForest, tidyverse)


status(swiss) 
plot_num(swiss) 
profiling_num(swiss) 


# Treino e Teste: Pré-processamento
particaoswiss = createDataPartition(1:nrow(swiss), p=.7) # cria a partição 70-30
treinoswiss = swiss[particaoswiss$Resample1, ] # treino
testeswiss = swiss[-particaoswiss$Resample1, ] # - treino = teste


corrplot(cor(treino[ , c(1:6)]))


train.control <- trainControl(method = "cv", number = 10) # controle de treino
# Treinamento
swiss_LM <- train(Infant.Mortality ~ ., data = swiss, method = "lm", trControl = train.control)
# Sumários
print(swiss_LM)
summary(swiss_LM)

# Bagging 
swiss_RF = randomForest(treinoswiss[ , c(1, 2, 3, 4, 5)], treinoswiss[ , 6], ntree = 100, keep.forest=T, keep.inbag = TRUE, importance=T) # floresta aleatória

plot(swiss_RF)

varImp(swiss_RF, scale = T) # importância de cada variável
varImpPlot(swiss_RF, type=2) # importância de cada variável

# Boosting

swiss_ADA <- train(Infant.Mortality ~ ., data = swiss, method = "glmboost") #, trControl = train.control)

# evolução do modelo
plot(swiss_ADA)

# Sumários
print(swiss_ADA)
summary(swiss_ADA)
